{
    "name": "Decrypt",
    "tag": "Decrypt",
    "weights": {
	"dev": 2.0,
	"spd": 1.0,
	"mem": 5.0
    },
    "description": "<p> The NSA intercepted an encrypted message form ISIS consisting in their bombing targets for the next year when they will posess nuclear bombs. However, in order to decrypt the message, they need to find out the encryption key. That's why they hired you to compute the key. </p> <br> <p> The NSA knows that the key can be computed form an array of N 32-bit integers given the following information: </p> <ul> <li> The key is 192 bits long </li> <li> The key is formed from 6 numbers merged together in appearance order in the array that have the condition that the sum of them is 0. More formally: Key = xi || xj || xk || xl || xm || xn , where i < j < k < l < m < n and xi + xj + xk + xl + xm + xn = 0  </li> <li> It is guaranteed that there are only 6 numbers in the array that sum up to 0 </li> </ul> <p> The operator '||' is defined in the following way: c = a || b, where a and b are 32 bits numbers => first 32 bits of c is the number a and the last 32 bits of c is b. </p> <p> Your task is to find the key and print it as a sequence of bits starting with the Least significant bit (The least significant bit is the units bit. As an example, the number 4 = 100b has the least significant bit 0). </p> Please approach this task in order to save the lives of milions of people. <p> </p><h2> Input from stdin: </h2> <p> one line containing the integer N</p> <p> Next line contains N integegers that form the array </p><h2> Output into stdout: </h2> <p> A string of 192 1s and 0s that represent the key </p><h2> Restrictions </h2> <p> N < 70; -2^31 < integers in the array < 2^31 - 1;</p>",
    "sample": {
	"test_cases": [
	    "10 4 2 5 6 -7 -1 -5 0 0 0",
	    "8 1 -1 4 -2 18 -3 1 -9"
	],
	"solutions": [
	    "010000000000000000000000000000001010000000000000000000000000000001100000000000000000000000000000100111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111111",
	    "100000000000000000000000000000001111111111111111111111111111111100100000000000000000000000000000011111111111111111111111111111111011111111111111111111111111111110000000000000000000000000000000"
	]
    },
    "official": {
	"test_cases": [
	    "9 0 0 1 0 2 0 0 1 1 1 2 1 0 2 1 2 2 2",
	    "6 -1 0 0 1 1 0 0 -1 0 0 1 1",
            "TODO",
            "TODO"
	],
	"solutions": [
	    "6",
	    "2",
            "TODO",
            "TODO"
	]
    }
}
